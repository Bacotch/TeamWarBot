import { Client, Collection, Events, GatewayIntentBits, MessageFlags } from "discord.js";
import { Command } from "../@types/discord";
import "dotenv/config";
import fs from "fs/promises";
import path from "path";
import { fileURLToPath } from "url";

const token = process.env.DISCORD_BOT_TOKEN;

if(!token){
    console.error("INVALID TOKEN ERROR");
    process.exit(1);
}

const client = new Client ({
    intents:[GatewayIntentBits.Guilds]
})

client.commands = new Collection<string,Command>()

const currentModuleFile = fileURLToPath(import.meta.url)
const currentModuleDir = path.dirname(currentModuleFile)
const foldersPath = path.join(currentModuleDir,"commands")
const commandFolders = await fs.readdir(foldersPath)

for (const folder of commandFolders){
    const commandsPath = path.join(foldersPath, folder)
    const commandFiles = (await fs.readdir(commandsPath)).filter((file)=> file.endsWith(".js"))
    for (const file of commandFiles){
        const filePath = path.join(commandsPath,file)
        const relativePath = "./" + path.relative(currentModuleDir,filePath).replace(/\\/g, '/');
        const module:Command = await import(relativePath)
        if(module?.data && typeof module.execute === "function") {
            client.commands.set(module.data.name,module)
        } else {
            console.error(`The command at ${filePath} is invalid.`);
        };
    }
}

client.on(Events.InteractionCreate,async (interaction)=>{
    if(!interaction.isChatInputCommand())return;

    const command = interaction.client.commands.get(interaction.commandName);

    if(!command){
        console.error(`No command matching ${interaction.commandName} was found.`);
        return;
    };

    try {
        command.execute(interaction);
    } catch (e) {
        console.error(e);
        if(interaction.replied || interaction.deferred){
            await interaction.followUp({content:"There was an error while executing this command", flags: MessageFlags.Ephemeral})
        } else {
            await interaction.reply({content:"There was an error while executing this command", flags: MessageFlags.Ephemeral})
        }
    }

})

client.once(Events.ClientReady,async () => {
    console.log("I'm ready");
})

client.login(token)

